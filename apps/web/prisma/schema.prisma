generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Startup {
  id                   String            @id @default(uuid())
  name                 String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  logo                 String?
  shortDescription     String
  longDescription      String
  website              String?
  linkedin             String?
  teamSizeid           String?
  locationid           String
  foundedAt            DateTime
  businessModel        String?
  amountRaised         Float?
  foundingStageid      String?
  isPopular            Boolean           @default(false)
  isFeatured           Boolean           @default(false)
  amountRaisedCurrency String?
  FounderStartup       FounderStartup[]
  InvestorStartup      InvestorStartup[]
  foundingStage        FoundingStage?    @relation(fields: [foundingStageid], references: [id])
  location             Location          @relation(fields: [locationid], references: [id])
  teamSize             TeamSize?         @relation(fields: [teamSizeid], references: [id])
  StartupTag           StartupTag[]
}

model StartupTag {
  id        String   @id @default(uuid())
  startupid String
  tagid     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startup   Startup  @relation(fields: [startupid], references: [id])
  tag       Tag      @relation(fields: [tagid], references: [id])
}

model Tag {
  id         String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  StartupTag StartupTag[]
}

model Country {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Location  Location[]
}

model Location {
  id        String    @id @default(uuid())
  name      String
  city      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  countryid String
  country   Country   @relation(fields: [countryid], references: [id])
  Startup   Startup[]
}

model TeamSize {
  id         String    @id @default(uuid())
  name       String
  upperLimit Int
  lowerLimit Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Startup    Startup[]
}

model FoundingStage {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Startup   Startup[]
}

model FounderStartup {
  id        String   @id @default(uuid())
  founderid String
  startupid String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  founder   Founder  @relation(fields: [founderid], references: [id])
  startup   Startup  @relation(fields: [startupid], references: [id])
}

model Founder {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  linkedin       String?
  photo          String?
  FounderStartup FounderStartup[]
}

model InvestorStartup {
  id         String   @id @default(uuid())
  investorid String
  startupid  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  investor   Investor @relation(fields: [investorid], references: [id])
  startup    Startup  @relation(fields: [startupid], references: [id])
}

model Investor {
  id              String            @id @default(uuid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  linkedin        String?
  website         String?
  photo           String?
  InvestorStartup InvestorStartup[]
}
